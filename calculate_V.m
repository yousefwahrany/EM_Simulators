function [V] = calculate_V(x_1, x_2, x_0, y_0)

if x_0 == x_1
    

    V = (-x_0 * log(abs(y_0^2 + x_2^2 - 2 * x_0 * x_2 + x_0^2)) ...
         + x_2 * log(y_0^2 + x_2^2 - 2 * x_0 * x_2 + x_0^2) ...
         + 2 * atan((x_2 - x_0) / y_0) * y_0 ...
         - 2 * x_2 + 2 * x_1) / 2;
     
elseif x_0 == x_2
    
    V = (+ x_0 * log(abs(y_0^2 + x_1^2 - 2 * x_0 * x_1 + x_0^2)) ...
         - x_1 * log(y_0^2 + x_1^2 - 2 * x_0 * x_1 + x_0^2) ...
         - 2 * atan((x_1 - x_0) / y_0) * y_0 ...
         - 2 * x_2 + 2 * x_1) / 2;
else
    

    V = (-x_0 * log(abs(y_0^2 + x_2^2 - 2 * x_0 * x_2 + x_0^2)) ...
         + x_0 * log(abs(y_0^2 + x_1^2 - 2 * x_0 * x_1 + x_0^2)) ...
         + x_2 * log(y_0^2 + x_2^2 - 2 * x_0 * x_2 + x_0^2) ...
         - x_1 * log(y_0^2 + x_1^2 - 2 * x_0 * x_1 + x_0^2) ...
         + 2 * atan((x_2 - x_0) / y_0) * y_0 ...
         - 2 * atan((x_1 - x_0) / y_0) * y_0 ...
         - 2 * x_2 + 2 * x_1) / 2;
end

% f = @(x) log(sqrt((x - x_0).^2 + y_0^2));  % Define the function f(x) = x^2
% a = x_1;          % Lower limit
% b = x_2;          % Upper limit
% V = integral(f, a, b); 

end

